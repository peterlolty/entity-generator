<?php

/**
 * @file
 * Module for the Model Entity.
 */

include_once 'model.menu.inc';
include_once 'model.features.inc';
include_once 'model.views.inc';

%HOOKS%

/**
 * Implements hook_entity_info().
 */
function model_entity_info() {
  $return['model_modelentity'] = array(
    'label'             => t('ELabel'),
    'plural label'      => t('ELabels'),
    // The entity class and controller class extend the classes provided by the
    // Entity API.
    'entity class'      => 'Modelentity',
    'controller class'  => 'ModelentityController',
    'metadata controller class' => 'ModelentityMetadataController',
    'base table'        => 'model_modelentity',
    'fieldable'         => TRUE,
    'entity keys'       => array(
      'id'     => 'model_modelentity_id',
      'bundle' => 'type',
      'label'  => 'name',
    ),
    // Bundles are defined by the model_modelentity types below.
    'bundles'           => array(),
    // Bundle keys tell the FieldAPI how to extract information from the
    // bundle objects.
    'bundle keys'       => array(
      'bundle' => 'type',
    ),
    'label callback'    => 'entity_class_label',
    'uri callback'      => 'entity_class_uri',
    'creation callback' => 'model_modelentity_create',
    'access callback'   => 'model_modelentity_access',
    'module'            => 'model',
    // The information below is used by the ModelentityUIController
    // (which extends the EntityDefaultUIController).
    'admin ui'          => array(
      'path'             => 'model/modelentities',
      'file'             => 'includes/model_modelentity.admin.inc',
      'controller class' => 'ModelentityUIController',
      'menu wildcard'    => '%model_modelentity',
    ),
    'inline entity form' => array(
      'controller' => 'ModelentityInlineEntityFormController'
    ),
  );

  // The entity that holds information about the entity types.
  $return['model_modelentity_type'] = array(
    'label'            => t('ELabel type'),
    'plural label'     => t('ELabel types'),
    'entity class'     => 'ModelentityType',
    'controller class' => 'ModelentityTypeController',
    'base table'       => 'model_modelentity_type',
    'fieldable'        => FALSE,
    'bundle of'        => 'model_modelentity',
    'exportable'       => TRUE,
    'entity keys'      => array(
      'id'    => 'id',
      'name'  => 'type',
      'label' => 'label',
    ),
    'access callback'  => 'model_modelentity_type_access',
    'module'           => 'model',
    // Enable the entity API's admin UI.
    'admin ui'         => array(
      'path'             => 'admin/structure/model/modelentity_types',
      'file'             => 'includes/model_modelentity_type.admin.inc',
      'controller class' => 'ModelentityTypeUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the model_modelentity types via a hook to avoid
 * a recursion issue as loading the model_modelentity types requires the entity
 * info as well.
 *
 * @todo This needs to be improved
 */
function model_entity_info_alter(&$entity_info) {
  foreach (model_modelentity_get_types() as $type => $info) {
    $entity_info['model_modelentity']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path'             => 'admin/structure/model/modelentity_types/manage/%model_modelentity_type',
        'real path'        => 'admin/structure/model/modelentity_types/manage/' . $type,
        'bundle argument'  => 5,
        'access callback'  => 'model_modelentity_type_access',
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function model_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity.
  $permissions = array(
    'access model' => array(
      'title'       => t('Access module_name'),
      'description' => t('Access module_name, manage items, etc.'),
    ),
    'access model administration' => array(
      'title'       => t('Access module_name Administration'),
      'description' => t('Access module_name administration, manage settings, types, etc.'),
    ),
    'administer model model_modelentity types' => array(
      'title'       => t('Administer ELabel types'),
      'description' => t('Create and delete fields for ELabel types.'),
      'restrict access' => TRUE,
    ),
    'administer model model_modelentities'     => array(
      'title'       => t('Administer ELabels'),
      'description' => t('Edit and delete all ELabels'),
      'restrict access' => TRUE,
    ),
  );

  // Generate permissions per model_modelentity.
  foreach (model_modelentity_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "create any model $type_name model_modelentity"   => array(
        'title' => t('%type_name: Create ELabel', array('%type_name' => $type->label)),
      ),
      "view any model $type_name model_modelentity"   => array(
        'title' => t('%type_name: View any ELabel', array('%type_name' => $type->label)),
      ),
      "edit any model $type_name model_modelentity"   => array(
        'title' => t('%type_name: Edit any ELabel', array('%type_name' => $type->label)),
      ),
      "delete any model $type_name model_modelentity" => array(
        'title' => t('%type_name: Delete any ELabel', array('%type_name' => $type->label)),
      ),
      "view own model $type_name model_modelentity"   => array(
        'title' => t('%type_name: View own ELabel', array('%type_name' => $type->label)),
      ),
      "edit own model $type_name model_modelentity"   => array(
        'title' => t('%type_name: Edit own ELabel', array('%type_name' => $type->label)),
      ),
      "delete own model $type_name model_modelentity" => array(
        'title' => t('%type_name: Delete own ELabel', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function model_theme() {
  return array(
    'model_modelentity_add_list' => array(
      'variables' => array('content' => array()),
      'file'      => 'includes/model_modelentity.admin.inc',
    ),
    'model_modelentity'          => array(
      'render element' => 'elements',
      'template'       => 'templates/entities/model_modelentity',
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function model_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/model_modelentities/add'
  // on 'admin/structure/model_modelentities'.
  if ($root_path == 'model/modelentities') {
    $item = menu_get_item('model/modelentities/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link'  => $item,
      );
    }
  }
}

include_once 'includes/model_modelentity.include.inc';
